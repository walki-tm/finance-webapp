generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  categories          Category[]
  subcategories       Subcategory[]
  transactions        Transaction[]
  budgets             Budget[]
  transactionGroups   TransactionGroup[]
  plannedTransactions PlannedTransaction[]
  loans               Loan[]
  savingsGoals        SavingsGoal[]
  goalTransactions    GoalTransaction[]
}

model Category {
  id        String   @id @default(cuid())
  userId    String
  main      String   @db.VarChar(32) // UPPERCASE enforced a livello applicativo
  name      String
  iconKey   String?
  colorHex  String?
  visible   Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User    User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  subcats Subcategory[]

  @@unique([userId, main, name])
}

model Subcategory {
  id         String   @id @default(cuid())
  userId     String
  categoryId String
  name       String
  iconKey    String?
  sortOrder  Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  User     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  transactions        Transaction[]
  budgets             Budget[]
  plannedTransactions PlannedTransaction[]
  loans               Loan[]
  savingsGoals        SavingsGoal[]

  @@unique([userId, categoryId, name])
  @@index([userId, categoryId, sortOrder])
}

model Budget {
  id             String   @id @default(cuid())
  userId         String
  main           String   @db.VarChar(32) // deve combaciare con la MAIN della Category
  subcategoryId  String?  // riferimento alla sottocategoria specifica
  period         String   // formato "YYYY-MM" per anno-mese
  amount         Decimal  @db.Decimal(20, 2)
  style          String   @default("FIXED") // FIXED, PERCENT_OF_INCOME, ENVELOPE, ONE_OFF
  pctOfIncome    Decimal? @db.Decimal(5, 2) // percentuale del reddito se style = PERCENT_OF_INCOME
  rollover       Boolean  @default(false)
  capType        String?  // SOFT, HARD
  notes          String?
  overrideChildren Boolean @default(false)
  managedAutomatically Boolean @default(false) // indica se il budget √® gestito automaticamente dalle transazioni pianificate
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
  subcategory Subcategory? @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)

  @@unique([userId, main, subcategoryId, period])
  @@index([userId, period])
  @@index([userId, main])
  @@index([userId, managedAutomatically])
}

model Transaction {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime
  amount    Decimal  @db.Decimal(20, 2)
  main      String   @db.VarChar(32) // deve combaciare con la MAIN della Category usata
  subId     String?
  note      String?
  payee     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // quando una Subcategory viene cancellata, vogliamo mantenere la Transaction
  // e semplicemente azzerare il riferimento
  subcategory Subcategory? @relation(fields: [subId], references: [id], onDelete: SetNull)

  @@index([userId, date])
  @@index([userId, main])
  @@index([subId])
}

// Gruppo per organizzare transazioni pianificate
model TransactionGroup {
  id        String   @id @default(cuid())
  userId    String
  name      String   // nome definito dall'utente
  color     String?  // colore personalizzato del gruppo (hex)
  sortOrder Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
  plannedTransactions PlannedTransaction[]

  @@unique([userId, name])
  @@index([userId, sortOrder])
}

// Transazioni pianificate
model PlannedTransaction {
  id              String   @id @default(cuid())
  userId          String
  title           String?  // titolo opzionale della transazione
  groupId         String?  // collegamento al gruppo opzionale
  main            String   @db.VarChar(32) // categoria principale
  subId           String?  // sottocategoria
  amount          Decimal  @db.Decimal(20, 2)
  note            String?
  payee           String?
  frequency       String   // MONTHLY, YEARLY, ONE_TIME
  startDate       DateTime // data di inizio
  confirmationMode String   @default("MANUAL") // MANUAL, AUTOMATIC
  nextDueDate     DateTime // prossima data di scadenza
  isActive        Boolean  @default(true)
  appliedToBudget Boolean  @default(false) // indica se √® applicata al budgeting generale
  budgetApplicationMode String? // modalit√† usata per applicazione budgeting: 'divide' o 'specific'
  budgetTargetMonth Int? // mese target per modalit√† 'specific' (0-11)
  loanId          String?  // collegamento diretto al prestito, se questa planned transaction rappresenta le rate del prestito
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  User    User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  group   TransactionGroup? @relation(fields: [groupId], references: [id], onDelete: SetNull)
  subcategory Subcategory?  @relation(fields: [subId], references: [id], onDelete: SetNull)
  loan    Loan?             @relation(fields: [loanId], references: [id], onDelete: SetNull)

  @@index([userId, nextDueDate])
  @@index([userId, frequency])
  @@index([groupId])
  @@index([loanId])
}

// =============================================================================
// üè¶ SISTEMA PRESTITI/MUTUI
// =============================================================================

// üè¶ Prestiti e mutui con gestione dinamica ottimizzata
model Loan {
  id          String   @id @default(cuid())
  userId      String
  name        String   // nome del prestito (es: "Mutuo Casa", "Prestito Auto")
  loanType    String   // MORTGAGE, PERSONAL_LOAN
  lenderName  String   // nome banca/ente erogante
  
  // üí∞ Parametri finanziari
  principalAmount    Decimal  @db.Decimal(20, 2) // importo iniziale del prestito
  currentBalance     Decimal  @db.Decimal(20, 2) // debito residuo attuale
  interestRate       Decimal  @db.Decimal(5, 4)  // TAN (es: 0.0350 = 3.50%)
  effectiveRate      Decimal? @db.Decimal(5, 4)  // TAEG opzionale
  rateType           String   @default("FIXED")  // FIXED, VARIABLE
  
  // üìÖ Gestione rate dinamica
  totalPayments      Int      @default(1) // numero totale rate (es: 84)
  paidPayments       Int      @default(0) // numero rate gi√† pagate (es: 12)
  startDate          DateTime // data erogazione prestito
  nextPaymentDate    DateTime @default(now()) // prossima data di pagamento (dinamica)
  
  // üí≥ Parametri rata
  paymentFrequency   String   @default("MONTHLY") // MONTHLY, QUARTERLY, SEMIANNUAL
  monthlyPayment     Decimal  @db.Decimal(20, 2)  // importo rata mensile
  
  // üìà Costi aggiuntivi
  additionalCosts    Decimal? @db.Decimal(20, 2)  // spese accessorie (notaio, perizie, etc.)
  
  // üìù Informazioni aggiuntive
  description        String?
  notes              String?
  
  // üè∑Ô∏è Categorizzazione
  categoryMain       String?  @db.VarChar(32) // categoria principale per budgeting
  subcategoryId      String?  // sottocategoria specifica
  
  // ‚öôÔ∏è Stati e configurazione
  status             String   @default("ACTIVE") // ACTIVE, PAID_OFF, SUSPENDED, DEFAULTED
  autoCreatePayments Boolean  @default(true)     // auto-genera planned transactions per le rate
  
  // üïí Audit
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // üîó Relazioni
  User         User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  subcategory  Subcategory?        @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  transactions LoanTransaction[]   // solo le transazioni effettivamente pagate
  plannedTransactions PlannedTransaction[] // planned transaction ricorrente per le rate

  // üìà Indici per performance
  @@index([userId, status])
  @@index([userId, loanType])
  @@index([userId, nextPaymentDate])
  @@index([subcategoryId])
}

// üí≥ Transazioni effettive del prestito (solo pagamenti avvenuti)
model LoanTransaction {
  id                String   @id @default(cuid())
  loanId            String
  paymentNumber     Int      // numero progressivo della rata pagata (1, 2, 3, ...)
  
  // üìÖ Date
  paidDate          DateTime // data effettiva di pagamento
  
  // üí∞ Importi effettivi pagati
  totalAmount       Decimal  @db.Decimal(20, 2) // importo totale pagato per questa rata
  principalAmount   Decimal  @db.Decimal(20, 2) // quota capitale pagata
  interestAmount    Decimal  @db.Decimal(20, 2) // quota interessi pagata
  lateFee           Decimal? @db.Decimal(20, 2) // penale per ritardo (se applicabile)
  
  // üìä Stato del debito dopo questo pagamento
  balanceAfterPayment Decimal @db.Decimal(20, 2) // debito residuo dopo questa rata
  
  // üìù Informazioni aggiuntive
  notes             String?
  paymentMethod     String?  // contanti, bonifico, carta, ecc.
  
  // üïí Audit
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // üîó Relazioni
  loan              Loan     @relation(fields: [loanId], references: [id], onDelete: Cascade)

  // üìà Indici per performance
  @@index([loanId, paymentNumber])
  @@index([loanId, paidDate])
  @@index([paidDate])
  
  // üîí Constraint: ogni prestito ha transazioni con numeri progressivi unici
  @@unique([loanId, paymentNumber])
}

// =============================================================================
// üéØ SISTEMA OBIETTIVI DI RISPARMIO
// =============================================================================

// üéØ Obiettivi di risparmio con gestione completa
model SavingsGoal {
  id            String   @id @default(cuid())
  userId        String
  
  // üìù Informazioni principali
  title         String   // nome dell'obiettivo (es: "Vacanza a Tokyo")
  targetAmount  Decimal  @db.Decimal(20, 2) // importo obiettivo (es: 1800.00)
  currentAmount Decimal  @db.Decimal(20, 2) @default(0) // importo attualmente risparmiato
  targetDate    DateTime? // scadenza obiettivo opzionale (es: 04/09/2026 o null per "Accumulo Soldi")
  
  // üè∑Ô∏è Categorizzazione (obbligatoria)
  categoryMain  String   @db.VarChar(32) // categoria principale (es: "SAVINGS")
  subcategoryId String   // sottocategoria specifica (obbligatoria)
  
  // üìù Informazioni aggiuntive
  notes         String?  // note opzionali
  iconKey       String?  // icona personalizzata
  
  // ‚öôÔ∏è Stato e configurazione
  status        String   @default("ACTIVE") // ACTIVE, COMPLETED, EXPIRED, PAUSED
  
  // üïí Audit
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // üîó Relazioni
  User           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  subcategory    Subcategory      @relation(fields: [subcategoryId], references: [id], onDelete: Restrict)
  goalTransactions GoalTransaction[] // storico operazioni sull'obiettivo

  // üìà Indici per performance
  @@index([userId, status])
  @@index([userId, targetDate])
  @@index([subcategoryId])
}

// üí∞ Transazioni specifiche per obiettivi di risparmio
model GoalTransaction {
  id            String   @id @default(cuid())
  userId        String
  goalId        String
  
  // üí∞ Dettagli operazione
  amount        Decimal  @db.Decimal(20, 2) // importo dell'operazione
  type          String   // ADD (aggiungi saldo) o WITHDRAW (preleva)
  
  // üîó Collegamento transazione principale
  transactionId String?  // ID della transazione principale creata nel sistema
  
  // üìù Informazioni aggiuntive
  notes         String?  // note dell'operazione
  
  // üïí Audit
  createdAt     DateTime @default(now())

  // üîó Relazioni
  User         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  goal         SavingsGoal @relation(fields: [goalId], references: [id], onDelete: Cascade)

  // üìà Indici per performance
  @@index([userId, goalId])
  @@index([goalId, createdAt])
  @@index([transactionId])
}
