generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  categories          Category[]
  subcategories       Subcategory[]
  transactions        Transaction[]
  budgets             Budget[]
  transactionGroups   TransactionGroup[]
  plannedTransactions PlannedTransaction[]
}

model Category {
  id        String   @id @default(cuid())
  userId    String
  main      String   @db.VarChar(32) // UPPERCASE enforced a livello applicativo
  name      String
  iconKey   String?
  colorHex  String?
  visible   Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User    User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  subcats Subcategory[]

  @@unique([userId, main, name])
}

model Subcategory {
  id         String   @id @default(cuid())
  userId     String
  categoryId String
  name       String
  iconKey    String?
  sortOrder  Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  User     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  transactions        Transaction[]
  budgets             Budget[]
  plannedTransactions PlannedTransaction[]

  @@unique([userId, categoryId, name])
  @@index([userId, categoryId, sortOrder])
}

model Budget {
  id             String   @id @default(cuid())
  userId         String
  main           String   @db.VarChar(32) // deve combaciare con la MAIN della Category
  subcategoryId  String?  // riferimento alla sottocategoria specifica
  period         String   // formato "YYYY-MM" per anno-mese
  amount         Decimal  @db.Decimal(20, 2)
  style          String   @default("FIXED") // FIXED, PERCENT_OF_INCOME, ENVELOPE, ONE_OFF
  pctOfIncome    Decimal? @db.Decimal(5, 2) // percentuale del reddito se style = PERCENT_OF_INCOME
  rollover       Boolean  @default(false)
  capType        String?  // SOFT, HARD
  notes          String?
  overrideChildren Boolean @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
  subcategory Subcategory? @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)

  @@unique([userId, main, subcategoryId, period])
  @@index([userId, period])
  @@index([userId, main])
}

model Transaction {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime
  amount    Decimal  @db.Decimal(20, 2)
  main      String   @db.VarChar(32) // deve combaciare con la MAIN della Category usata
  subId     String?
  note      String?
  payee     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // quando una Subcategory viene cancellata, vogliamo mantenere la Transaction
  // e semplicemente azzerare il riferimento
  subcategory Subcategory? @relation(fields: [subId], references: [id], onDelete: SetNull)

  @@index([userId, date])
  @@index([userId, main])
  @@index([subId])
}

// Gruppo per organizzare transazioni pianificate
model TransactionGroup {
  id        String   @id @default(cuid())
  userId    String
  name      String   // nome definito dall'utente
  sortOrder Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
  plannedTransactions PlannedTransaction[]

  @@unique([userId, name])
  @@index([userId, sortOrder])
}

// Transazioni pianificate
model PlannedTransaction {
  id              String   @id @default(cuid())
  userId          String
  groupId         String?  // collegamento al gruppo opzionale
  main            String   @db.VarChar(32) // categoria principale
  subId           String?  // sottocategoria
  amount          Decimal  @db.Decimal(20, 2)
  note            String?
  payee           String?
  frequency       String   // MONTHLY, YEARLY, ONE_TIME
  startDate       DateTime // data di inizio
  endDate         DateTime? // data di fine opzionale
  confirmationMode String   @default("MANUAL") // MANUAL, AUTOMATIC
  nextDueDate     DateTime // prossima data di scadenza
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  User    User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  group   TransactionGroup? @relation(fields: [groupId], references: [id], onDelete: SetNull)
  subcategory Subcategory?  @relation(fields: [subId], references: [id], onDelete: SetNull)

  @@index([userId, nextDueDate])
  @@index([userId, frequency])
  @@index([groupId])
}
